---
title: "R intermediate"
author: "Luke Stageberg"
date: "January 15, 2016"
output: html_document
---

> Premature optimization is the root of all evil -- Donald Knuth

The humble for loop is often considered distasteful by seasoned programmers
because it is inefficient; however, the for loop is one of the most useful and
generalizable programming structures in R. If you can learn how to construct and
understand for loops then you can code almost any iterative task. Once your loop
works you can always work to optimize your code and increase its efficiency.

Before attempting these exercises you should review the lesson 
[R intermediate](../lessons/R_intermediate) in which loops were covered. 

Examine the following for loop, and then complete the exercises

```{r}
data(iris)
head(iris)

sp_ids = unique(iris$Species)

output = matrix(0, nrow=length(sp_ids), ncol=ncol(iris)-1)
rownames(output) = sp_ids
colnames(output) = names(iris[ , -ncol(iris)])

for(i in seq_along(sp_ids)) {
    # create a subset of the iris data that just is for one species
    iris_sp = subset(iris, subset=Species == sp_ids[i], select=-Species)
    # 
    for(j in 1:(ncol(iris_sp))) {
        x = 0
        y = 0
        if (nrow(iris_sp) > 0) {
            for(k in 1:nrow(iris_sp)) {
                x = x + iris_sp[k, j]
                y = y + 1
            }
            output[i, j] = x / y 
        }
    }
}
output
```
##Excercises
###Iris loops

1. Describe the values stored in the object `output`. In other words what did the 
loops create?

The loops created an average for each of the following: sepal length, sepal width, petal length, and petal width for each of the three species (setosa, versicolor, virginiaca) 

2. Describe using pseudo-code how `output` was calculated, for example,
```{r, eval=FALSE}
Loop from 1 to length of species identities
   Create a subset of the iris data that just is for one species 
   Loop from 1 to number of columns of the subset of the iris data
   Thus for each species the loop will go through each of the four columns (for the four different traits)
   The x value is set equal to the sum of all the values in the specific column
   The y value is set equal to the number of entries in that same column
      If the numer of rows in iris_sp is greater than zero occurs then do compute the ration of x/y which gives the mean of the trait 
      The loop is ran 12 times in the istuation because the iris data has 3 species and 4 traits
```

3. The variables in the loop were named so as to be vague. How can the objects
`output`, `x`, and `y` could be renamed such that it is clearer what is occurring
in the loop.

In the loop 'output' could be renamed 'mean value of trait', 'x' could be renamed 'sum of traits', and 'y' could be renamed as 'number of traits'.

4. It is possible to accomplish the same task using fewer lines of code? Please suggest one other way to calculate `output` that decreases the number of loops
by 1.

Yes, you can replace:
        x = 0
        y = 0
        if (nrow(iris_sp) > 0) {
            for(k in 1:nrow(iris_sp)) {
                x = x + iris_sp[k, j]
                y = y + 1
            }
            output[i, j] = x / y 
        }
    }
}
output 

with

        avg_trait[i,j] = mean(iris_sp[ ,j])
    }
}
avg_trait

###Sum of a sequence

5. You have a vector `x` with the numbers 1:10. Write a
for loop that will produce a vector `y` that contains the sum of `x` up to that
index of `x`. So for example the elements of `x` are 1, 2, 3, and so on and the 
elements of `y` would be 1, 3, 6, and so on. 

```{r}
x <- c(1:10)
y = 0
for (i in seq_along(x)) {
  y[i] = sum(x[1:i])
}
y
```

6. Modify your for loop so that if the sum is greater than 10 the value of `y`
is set to NA

```{r}
x <- c(1:10)
y = 0
for (i in seq_along(x)) {
  y[i] = sum(x[1:i])
    y[y > 10] <- NA
}
y
```

7. Place your for loop into a function that accepts as its argument any vector
of arbitrary length and it will return `y`. 

```{r}
sum_vector_elements <-  function(x, y = 0) {
  y = 0
  for (i in seq_along(x)) {
      y[i] = sum(x[1:i])
        y[y > 10] <- NA
  y
    }
  return(y)
}
```

```{r}
sum_vector_elements(1:6)
sum_vector_elements(c(1, 5, 1, 8, 4))
```
